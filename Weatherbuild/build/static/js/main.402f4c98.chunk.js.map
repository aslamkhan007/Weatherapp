{"version":3,"sources":["app_component/Weather.component.jsx","app_component/Form.js","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","onSubmit","loadweather","city","weatherIcon","temp_celcius","temp_min","temp_max","description","error","role","Form","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celcius","calCelcius","main","temp","weather","icon","Thunderstrom","get_weather","id","state","undefined","this","Drizzle","Rain","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","thunderstorm","Snow","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.402f4c98.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"cards pt-4\">\r\n          <h1>{props.city}</h1>\r\n          <h5 className=\"py-4\">\r\n            <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n          </h5>\r\n          {props.temp_celcius ? (\r\n            <h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>\r\n          ) : null}\r\n          {minmaxTemp(props.temp_min, props.temp_max)}\r\n          <h1 className=\"py-4\"> {props.description}</h1>\r\n        </div>\r\n        {/* <button  className=\"btn btn-primary\">\r\n            <i class=\"bi bi-alarm\"></i> \r\n            Alarm\r\n            </button>\r\n\r\n            <button  className=\"btn btn-primary\">\r\n            <i class=\"fab fa-adversal\"></i>\r\n            Adds\r\n            </button> */}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"py-4\">{min}&deg;</span>\r\n        <span className=\"py-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={props.loadweather}>\r\n        <div>{props.error ? error() : null}</div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst error = (props) => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country...!\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Weather from \"./app_component/Weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./app_component/Form\";\n\nconst API_key = \"86e29547225c07e242e3cbd45190dd39\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    // this.getWeather();\n    this.weatherIcon = {\n      Thunderstrom: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n\n  calCelcius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_weather(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId == 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      // const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=punjab&appid=${API_key}`)\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n      const response = await api_call.json();\n      console.log(response);\n\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n        celcius: this.calCelcius(response.main.temp),\n        temp_max: this.calCelcius(response.main.temp_max),\n        temp_min: this.calCelcius(response.main.temp_min),\n        description: response.weather[0].description,\n        icon: this.weatherIcon.Thunderstrom,\n        error: false,\n      });\n      this.get_weather(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celcius={this.state.celcius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        ></Weather>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}